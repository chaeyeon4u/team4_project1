<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.dao.join.ProductDao">

	<resultMap type="productCommon" id="productCommonMap">
		<id property="id" column="id"/>
		<result property="name" column="productName"/>
		<result property="note" column="note"/>
		<result property="brandNo" column="brandNo"/>
	</resultMap>
	
	<resultMap type="productColor" id="productColorMap">
		<id property="id" column="pcolorId"/>
		<result property="img1" column="img1"/>
		<result property="img2" column="img2"/>
		<result property="img3" column="img3"/>
		<result property="colorImg" column="colorImg"/>
		<result property="productCommonId" column="productCommonId"/>
		<result property="colorCode" column="colorCode"/>
		<result property="price" column="price"/>
	</resultMap>
	
	<resultMap type="productStock" id="productStockMap">
		<id property="id" column="id"/>
		<result property="productColorId" column="productColorId"/>
		<result property="sizeCode" column="size_code"/>
		<result property="stock" column="stock"/>
	</resultMap>

	<resultMap type="brand" id="brandMap">
		<id property="no" column="no"/>
		<result property="name" column="brandName"/>
	</resultMap>
	
	<resultMap type="category" id="categoryMap">
		<id property="no" column="no"/>
		<result property="depth1Name" column="depth1_name"/>
		<result property="depth2Name" column="depth2_name"/>
		<result property="depth3Name" column="depth3_name"/>
	</resultMap>
	
	<resultMap type="com.mycompany.webapp.vo.join.Product" id="productMap">
		<collection property="productCommon" resultMap="productCommonMap"/>
		<collection property="productColor" resultMap="productColorMap"/>
		<collection property="productStock" resultMap="productStockMap"/>
		<collection property="brand" resultMap="brandMap"/>
		<collection property="category" resultMap="categoryMap"/>
	</resultMap>
	
	
	<select id="testRow" resultMap="productMap">
		select brand.name as brandName, product_common.name as productName, img1, price, product_color.id as pcolorId
		from product_common, product_color , brand
		where product_common.id = product_color.product_common_id 
		and brand.no = product_common.brand_no
		order by productName
	</select>
	
	<select id="selectProductByPcolorId" parameterType="String" resultMap="productMap">
		select distinct brand.name as brandName, product_common.name as productName 
				, price, product_color.id as pcolorId, note
				, img1, img2, img3
			from product_common, product_color, brand, product_stock
			where product_common.id = product_color.product_common_id 
			and brand.no = product_common.brand_no
			and product_stock.product_color_id = product_color.id
	        and product_color.id = #{pcolorId}
	</select>

	
	<select id="getProductByCategory" parameterType="com.mycompany.webapp.vo.join.CategoryDepthDto" resultMap="productMap">
		
		select rnum, brandName, productName, img1, price, pcolorId, depth1_name, depth2_name, depth3_name
		from (
		select rownum as rnum, brandName, productName, img1, price, pcolorId, depth1_name, depth2_name, depth3_name
		from (
			select distinct brand.name as brandName, 
			    product_common.name as productName, 
			    img1, 
			    price, 
			    product_color.id as pcolorId,
			    depth1_name, depth2_name, depth3_name
			from product_common, product_color , brand, product_category, category
			where product_common.id = product_color.product_common_id 
			and brand.no = product_common.brand_no
			and product_color.product_common_id = product_category.product_common_id
			and product_category.product_common_id = product_common.id
			and category.no = product_category.category_no
			and product_category.category_no in (select no from category where 
			depth1_name=#{depth1} 
			<if test="depth2 != null">
			and depth2_name=#{depth2}
			</if>
			<if test="depth3 != null"> 
			and depth3_name=#{depth3}
			</if>
			)
			order by productName
		)
		where rownum &lt;=#{pager.endRowNo}
		)
		where rnum &gt;=#{pager.startRowNo}
	</select>
	
	<select id="countByCategory" parameterType="com.mycompany.webapp.vo.join.CategoryDepthDto" resultType="int">
		select count(*) from(
		select
		distinct
		brand.name as brandName, 
		product_common.name as productName, 
		img1, 
		price, 
		product_color.id as pcolorId
		from product_common, product_color , brand, product_category
		where product_common.id = product_color.product_common_id 
		and brand.no = product_common.brand_no
		and product_color.product_common_id = product_category.product_common_id
		and product_category.category_no in (select no from category where 
		depth1_name=#{depth1} 
		<if test="depth2 != null">
		and depth2_name=#{depth2}
		</if>
		<if test="depth3 != null"> 
		and depth3_name=#{depth3}
		</if>
		)
		order by productName
		)
	</select>
	<!-- 상품의 컬러 리스트 출력하기 -->
	<select id="selectColorsByPcolorId" parameterType="String" resultType="com.mycompany.webapp.dto.Color">
	select distinct color_code, color_img
	    from product_common, product_color
	    where product_color.product_common_id = (select product_common.id as pcommon_id
	        from product_color, product_common 
	        where product_color.id = #{pcolorId}
	        and product_color.product_common_id = product_common.id)
	</select>
	<!-- 상품의 사이즈 리스트 출력하기 -->
	<select id="selectSizesByPcolorId" parameterType="String" resultType="com.mycompany.webapp.dto.Size">
	select distinct size_code
	    from product_common, product_color, product_stock
	    where product_color.id = 'IL2B8KCD721W_MR'
	    and product_color.id = product_stock.product_color_id
	</select>
</mapper>